/* 
 * File:   Game.h
 * Author: adayoldbagel
 *
 * Created on February 7, 2015, 1:14 PM
 */

#ifndef GAME_H
#define	GAME_H

//#include <iostream>

#include "Render.h"
#include "PhysMove.h"
#include "PhysCollide.h"
#include "UserControl.h"
#include "Engine.h"
#include "ControlDelegateBag.h"

class Game
{
private:
/****************************
 * THE GAME NEEDS:
 ***************************/

/* A WINDOW TO PLAY IN */
    SDL_Window* window;
    
/* ASSETS - MESHES, TEXTURES, SOUNDS, ETC */
    
/* COMPONENTS THAT DRAW FROM THE ASSETS */
    // A component bank - all the game data, stored as collections of components
    ComponentBank* bank;
    
/* SYSTEMS TO OPERATE ON THE COMPONENTS */
    // A system to render all graphical components (manages openGL calls)
    System_Render* renderingSystem;
    // A system to move all spatial components according to motion components
    System_PhysMove* physicsMoveSystem;
    // A system to check collisions between all spatial components according to collision components
    System_PhysCollide* physicsCollisionSystem;
    // A system to handle user input, along with delegates of top level functions
    System_UserControl* userControlSystem;
    DelegateBag* controlDelegates;
    // More systems to come...
    
/* ENGINES ON WHICH TO RUN THE SYSTEMS */
    // An engine (with accompanying thread) to run all graphics Systems
    SystemEngine* graphicsEngine;
    SDL_Thread* graphicsThread;
    // An engine (with accompanying thread) to run all physics Systems
    SystemEngine* physicsEngine;
    SDL_Thread* physicsThread;
    // More engines to come...
    
/* INTERNAL FUNCTIONS THAT MANAGE ALL THE ABOVE */
    // Set up the SDL window
    bool initializeSDLwindow();
    // Set up the components and systems (entities are implied)
    bool initializeECS();
    // Set up the engines
    bool initializeEngines();
    // Start the engines (create the threads)
    bool startEngines();
    // Quit the the systems, wait for the threads to exit.
    bool quitEngines();
    // Pause game systems momentarily
    bool pauseEngines();
    // Resume game systems from a paused state
    bool resumeEngines();
    // Set all fields to NULL
    void nullifyPointers();
    // De-allocate memory
    void freeMemory();
    // More internal functions to come...    
    
/* TOP LEVEL FUNCTIONS THAT CALL INTERNAL FUNCTIONS */
    // pull up the in-game menu
    void Menu();
    // start a new game
    bool NewGame();
    // pause the game
    void Pause();
    // resume the game
    void Resume();
    // quit the game
    void Quit();
    // More top level functions to come...
    
public:
/* INITIALIZATION AND DISPOSAL */
    Game();
    ~Game();
    
/* PUBLIC METHODS */
    bool Begin();
};

#endif	/* GAME_H */

